use strict;
package main;

use lib "/usr/local/ActivePerl-5.8/lib/site_perl/5.8.0";
use lib "/usr/local/ActivePerl-5.8/lib/site_perl/5.8.0/i686-linux-thread-multi";
use GD::Graph::pie;
use GD::Graph::bars;

# Convert period into seconds
if ($period =~ m/day/) {
        $period="end-1d";
} elsif ($period =~ m/week/) {
        $period="end-1w";
} elsif ($period =~ m/month/) {
        $period="end-1m";
} elsif ($period =~ m/year/) {
        $period="end-1y";
}

# Setup host array
# DEFINE ARRAY of hosts to list
my $hostArray = [];
if ($sessionObj->param("hostGroupID") eq "All Hosts") {
	my $admin2Host = lock_retrieve("$perfhome/var/db/mappings/admin2Host.ser") or die("Could not lock_retrieve from $perfhome/var/db/mappings/admin2Host.ser");
	my $hostHash = $admin2Host->{$sessionObj->param("selectedAdmin")};
	#define array of hosts
	foreach my $hostName (sort(keys(%$hostHash))) {
		push(@$hostArray, $hostName);
	}
} else {
	my $hgOwner = $sessionObj->param("selectedUser");
	my $hgID = $sessionObj->param("hostGroupID");
	my $hostGroup = lock_retrieve("$perfhome/var/db/users/$hgOwner/hostGroups/$hgID.ser") or die("Error: can't retrieve $perfhome/var/db/users/$hgOwner/hostGroups/$hgID.ser\n");
	my $hostHash = $hostGroup->{'memberHash'};
	#define array of hosts
	foreach my $hostName (sort(keys(%$hostHash))) {
		push(@$hostArray, $hostName);
	}
}

# Global Variables
my $mygraph=();
my @colors=();
my @data=();
my @label=();
my @metricAverages=();
my @metricNames=();
my $graphTitle=();
my $graphWidth=();
my $graphHeight=();
my $graphVerticalLabel=();
my $colorIndex={};
my %colorIndex=();
my $allMetricIndex={};
my %allMetricIndex=();
my $graphMetricHash={};
my %graphMetricHash=();
my @graphMetrics=();
my @test=();
my @keys=();
my @totals=();
my @refs=();

# Get Graph Object
my $hostGroupServiceGraphs = lock_retrieve("$perfhome/var/db/mappings/hostGroupServiceGraphs.ser") or die("Could not lock_retrieve from $perfhome/var/db/mappings/hostGroupServiceGraphs.ser");
my $graphObject = $hostGroupServiceGraphs->{$serviceName}->{$graphName};

# Get graph settings for all hosts
#foreach my $host (@$hostArray) {
	&GetGraphSettings;
#}

# Build colors array
#foreach my $color (sort keys %colorIndex) {
#	push(@colors,$color);
#}

# Build metric names array
#foreach my $metric (sort keys %allMetricIndex) {
#	push(@metricNames,$metric);
#}

# Get data for all hosts/metrics
foreach my $host (@$hostArray) {
	&GetData($host);
}

# Average Gathered Data
&AverageData;

#die "totals: @refs @keys @totals\n";

# Push metric names and values into single array
my $metricNamesRef=\@metricNames;
my $metricValuesRef=\@metricAverages;
push(@data, $metricNamesRef);
push(@data, $metricValuesRef);

# Build Graph
&GraphLabel;
&GraphOptions($graphType);

# Display Graph
my $myimage = $mygraph->plot(\@data) or die $mygraph->error;
print header({-type =>'image/png',-expires=>'-1d',-pragma=>'nocache'});
print $myimage->png;

# Average all data foreach metric
sub AverageData {

	# turn off strics refs
	no strict "refs";

	my $total=();
	my $average=();
	my $data_ref=();

	#foreach my $key (sort keys %allMetricIndex) {
	foreach my $key (@metricNames) {
		$data_ref=@{$key};

		push(@keys,$key);
        	foreach my $num (@{$key}) {
               		$total += $num;
        	}
		push(@totals, $total);
		push(@refs, $data_ref);

        	$average=$total / $data_ref;

        	# Build array with all metric averages
        	push(@metricAverages, $average);

		# Undefine values
        	undef $data_ref;
        	undef $total;
        	undef $average;
	}
}

# Create graph label array
sub GraphLabel {

	my $count=0;
	foreach my $metric (@metricNames) {
		my $digitsToCut="3";
		my $metricValue=@metricAverages[$count];

		if ($metricValue=~/\d+\.(\d){$digitsToCut,}/) {
    			$metricValue=sprintf("%.".($digitsToCut - 1)."f", $metricValue);
		}

		my $metricLabel="$metric:$metricValue";
		push(@label,$metricLabel);
		$count++;
	}
}
	
# Setup graph options based on type
sub GraphOptions {

	my $graphType=shift;
	if ($graphType =~ m/pie/) {
		$mygraph = GD::Graph::pie->new(300, 150);
		$mygraph->set(
			#title         => "$graphTitle",
			'3d'          => 1,
			label	    => "@label",
			dclrs       => \@colors,
		) or warn $mygraph->error;
	
	# Set Font for pie graphs
	$mygraph->set_value_font(GD::gdMediumBoldFont);
	$mygraph->set_label_font(GD::gdMediumBoldFont);

	} elsif ($graphType =~ m/bar/) {
		$mygraph = GD::Graph::bars->new(300, 150);
		$mygraph->set(
			#title       => "$graphTitle",
			x_label     => '',
			y_label     => "$graphVerticalLabel",
			bar_spacing => "10",
			cycle_clrs  => "1",
			dclrs       => \@colors,
		) or warn $mygraph->error;

		# Set Font for bar graphs
		$mygraph->set_x_axis_font(GD::gdMediumBoldFont);
		$mygraph->set_y_axis_font(GD::gdMediumBoldFont);
		$mygraph->set_x_label_font(GD::gdMediumBoldFont);
		$mygraph->set_y_label_font(GD::gdMediumBoldFont);
	}
}

# Get Graph settings
sub GetGraphSettings {

	# turn off strics refs
	#no strict "refs";

	#my $host=shift;

	$graphWidth=$graphObject->getWidth();
	$graphHeight=$graphObject->getHeight();
	$graphTitle=$graphObject->getTitle();
	$graphVerticalLabel=$graphObject->getVerticalLabel();

	my $i=();
	my $data_ref=\@{$graphObject->{metricArray}};

	foreach ($i=0; $i <= $#$data_ref; $i++) {

        	my $graphMetricName = @{$graphObject->{metricArray}}[$i]->getName();
        	my $metricColor = @{$graphObject->{metricArray}}[$i]->getColor();

        	#print "$i - $graphMetricName:$metricColor\n";
        	push(@metricNames,$graphMetricName);
        	push(@colors,$metricColor);
		#push (@{$host},$graphMetricName);
		push (@graphMetrics,$graphMetricName);
		#$graphMetricHash{$graphMetricName}="1";
		$allMetricIndex{$graphMetricName}="1";
		#$colorIndex{$metricColor}="1";
	}
}

# Get all data points foreach metric based on time period
sub GetData {

	# turn off strics refs
	no strict "refs";

	my $host=shift;

	#my $metrics=join(",", @{$host});
	#foreach my $metric (sort keys %graphMetricHash) {
	#	push(@graphMetrics,$metric);
	#}

	my $metrics=join(",", @graphMetrics);

	# HACK to get hostGroup graphs to work with total
	if (-f "$perfhome/rrd/$host/$host.$serviceName.Total.rrd") {
		$serviceName="$serviceName.Total";
	}

	my $report_cmd="$perfhome/bin/tools/perfreport.pl -h $host -s $serviceName -m $metrics -dump -end now -begin $period";

	# Build Hash for sorting data
	my $count="1";
	#foreach my $metric (@{$host}) {
	my $graphMetricCount="1";
	#foreach my $metric (sort keys %graphMetricHash) {
	foreach my $metric (@graphMetrics) {
        	#$metricHash{$count}="$metric";
        	${$host}{$count}="$metric";
        	$count++;
		$graphMetricCount ++;
	}

	# Dump data for time period into array
	my $getData=`$report_cmd`;
	my @dumpArray=split(" ", $getData);

	# Find out how many metrics we are dealing with
	my $numMetrics=@graphMetrics;
	#my $numMetrics=$graphMetricCount;

	# Create array for each metric
	my $arrayCount="1";
	my $metricCount="1";
	my $offset="0";
	my $lastMetric=();

	foreach my $line (@dumpArray) {
        	#foreach $key (sort keys %metricHash) {
        	foreach my $key (sort keys %{$host}) {
			# Set offset
			if ($key =~ m/$numMetrics/) {
				$lastMetric="1";
				$offset++;
			}
			if ($arrayCount =~ m/$metricCount/) {
				#print "host: $host metric: ${$host}{$key} value: $line\n";
				# Count only metric who have values
				if ($line !~ m/NaN/) {
               				push(@{${$host}{$key}}, $line);
				}
			}
			$metricCount++;
        	}
		$arrayCount++;

		if ($offset =~ m/$numMetrics/) {
			$offset="0";
			$metricCount=$arrayCount;
			undef $lastMetric;
		}
		if (defined $lastMetric) {
			$metricCount=$metricCount - $numMetrics;
			undef $lastMetric;
		}
	}
}
