###############################################################################
#
# ActiveState Client product installation script.
#
# Created on Tue Aug 24 21:54:11 2004 by ktenzer.
#
#		    ************ WARNING ************
#
#   This script was originally generated by C:\Perl\eg\PDK\PerlMSI\Install_Wizard\msiwiz.pl.
#   If an attempt is made to regenerate this script any changes made to the
#   original script will be lost.
#
#		    ************ WARNING ************
#
###############################################################################

use warnings;
use strict;
use MSI::Installer;
use MSI::Dialog;
use MSI::Image;
use Win32::Cabinet;
use IO::File;

use constant COMPANY_NAME	=> 'PerfStat';
use constant PRODUCT_NAME	=> 'Client';
use constant PRODUCT_VERSION	=> '1.0.0.1905';
use constant PRODUCT_BETA_VERSION	=> '1.50';
use constant MSI_DB             =>'Client-1.0.0-1.50-1905.msi';
use constant PRODUCT_LANG	=> '1033';
use constant INSTALL_IMAGE	=> '.\src';
use constant CODEPAGE		=> 1033;
use constant KEYWORDS		=> 'Installer';
use constant DESCRIPTION	=> 'Client files';
use constant PLATFORM		=> 'Intel;1033';
use constant PRIMARY_FOLDER	=> 'PERFSTAT';

use constant WIZARD_DIR	        => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard';
use constant INFO_ICON	        => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/info.ico';
use constant UP_ICON	        => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/Up.ico';
use constant NEW_ICON	        => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/New.ico';
use constant EXCLAMATION_ICON	=> 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/exclamic.ico';
use constant CUSTOMSETUP_ICON	=> 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/custicon.ico';
use constant REPAIR_ICON	    => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/repairic.ico';
use constant REMOVE_ICON	    => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/removico.ico';
use constant COMPLETESETUP_ICON	=> 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/completi.ico';

# Keith Commented out
#use constant BANNER_BITMAP      => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/Banner.bmp';
#use constant DIALOG_BITMAP      => 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/Dialog.bmp';
use constant LICENSE_AGREEMENT	=> 'C:/Perl/eg/PDK/PerlMSI/Install_Wizard/res/license.rtf';


my $installer = MSI::Installer->new(WIZARD_DIR . '/Schema.msi', WIZARD_DIR . "/OUTPUT/" . MSI_DB);


$installer->{DEBUG} = 0;
$installer->SetGUIDFile(WIZARD_DIR . '/OUTPUT/GUIDS.txt');
$installer->UseDialogSet();
$installer->SetSummaryInformation(
    Codepage    => CODEPAGE,
    ProductName => PRODUCT_NAME . " v " . PRODUCT_VERSION,
    CompanyName => COMPANY_NAME,
    Keywords    => KEYWORDS,
    Description => DESCRIPTION,
    Platform    => PLATFORM
    );

my $image = MSI::Image->new();
$image->CreateImage(INSTALL_IMAGE);

# You may customize the calls to $installer->CreateFeature() and
# $installer->SetComponentFeature() to arrange components in the appropriate features.
# Usage: CreateFeature(FeatureName,FeatureParent,Directory,Title,Description,isExpanded)

$installer->CreateFeature('TOP_FEATURE',"", PRIMARY_FOLDER, PRODUCT_NAME, DESCRIPTION,1);

$image->SetComponentFeature(PRIMARY_FOLDER, 'TOP_FEATURE', 1, 1);

$installer->AddCabinet($image, 5, PRODUCT_NAME . '.cab');
$installer->AddImage($image);

$installer->AddProperty(Property => 'Manufacturer', Value => COMPANY_NAME);
$installer->AddProperty(Property => 'ProductName', Value => COMPANY_NAME . " " . PRODUCT_NAME . " " . PRODUCT_BETA_VERSION);
$installer->AddProperty(Property => 'ProductCode', Value => $installer->GetGUID(PRODUCT_NAME));
$installer->AddProperty(Property => 'ProductVersion', Value => PRODUCT_VERSION);
$installer->AddProperty(Property => 'ProductLanguage', Value => PRODUCT_LANG);
$installer->AddProperty(Property => 'ProductID', Value => 'none');
$installer->AddProperty(Property => 'Description', Value => DESCRIPTION);
$installer->AddProperty(Property => 'PRIMARYFOLDER', Value => 'TARGETDIR');

$installer->AddIconFile('InfoIcon', INFO_ICON);
$installer->AddIconFile('UpIcon', UP_ICON);
$installer->AddIconFile('NewIcon', NEW_ICON);
$installer->AddIconFile('ExclamationIcon', EXCLAMATION_ICON);
$installer->AddIconFile('CustomSetupIcon', CUSTOMSETUP_ICON);
$installer->AddIconFile('RepairIcon', REPAIR_ICON);
$installer->AddIconFile('RemoveIcon', REMOVE_ICON);
$installer->AddIconFile('CompleteSetupIcon', COMPLETESETUP_ICON);

# Keith Comented Out
#$installer->AddBannerBitmap(BANNER_BITMAP);
#$installer->AddDialogBitmap(DIALOG_BITMAP);
$installer->AddLicenseText(LICENSE_AGREEMENT);


#INSTALLATION SETTINGS
$installer->SetPerMachineInstallationType();
$installer->SetEnvironmentPath(PRIMARY_FOLDER);
$installer->SetRebootForWin9x();
$installer->SetTargetRoot('ProgramFilesFolder');

#set release notes
$installer->SetReadmeFile('PERFSTAT/doc/readme.html',WIZARD_DIR);

#$installer->SetShortcut('ProgramMenuFolder/ActiveProduct/User Guide',
#                        'ActiveProduct/doc/manual.html');
          
######################################################################################
#Aditional dialog with checkboxes
my $propCount = 1;
my $ContrCount = 1;
#################################
$installer->AddProperty(Property => 'CheckedCondition' . $propCount, Value => 1);
$installer->AddProperty(Property => 'DisableCondition' . $propCount, Value => 1);
$propCount++;
#$installer->AddProperty(Property => 'CheckedCondition' . $propCount, Value => 1);
$installer->AddProperty(Property => 'DisableCondition' . $propCount, Value => 1);
$propCount++;

# Keith Comented Out
#$installer->CreateOptionsDialog('Test Dialog','Testing CreateOptionsDialog function',
#                                "Text Text Text \nText Text Text Text \nText Text Text Text Text Text Text Text",  
#                           [                                                   
#                               {                                               
#                                   Property => 'test_prop_' . $ContrCount,                   
#                                   Caption => "test_prop_$ContrCount capt.",                       
#                                   CheckedCondition => 'CheckedCondition' . $ContrCount,      
#                                   DisableCondition => 'DisableCondition' . $ContrCount++,        
#                               },                                              
#                               {                                               
#                                   Property => 'test_prop_' . $ContrCount,                   
#                                   Caption => "test_prop_$ContrCount capt.",                       
#                                   CheckedCondition => 'CheckedCondition' . $ContrCount,      
#                                   DisableCondition => 'DisableCondition' . $ContrCount++,        
#                               },                                              
#                           ]                                                   
#                       );                                                      
###############################################################################################

#APP SEARCH:

#uncomment to search for MS Visual Studio 7.0 in the registry
#$installer->SetRegistrySearch('DEVENV','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\7.0\Setup\VS','EnvironmentPath');
#$installer->AddLaunchCondition(Condition => 'DEVENV <> "Absent"', Description => 'MS Visual Studio 7.0 not found.');

#search for WScript.Shell
$installer->SetRegistrySearch('WSCRIPT.SHELL','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Classes\WScript.Shell\CLSID','');
$installer->AddLaunchCondition(Condition => 'WSCRIPT.SHELL <> "Absent"', Description => "The installer has detected that Windows Scripting Host is not installed.\nThis installer requires Windows Scripting Host to continue. You can download\nWindows Scripting Host  from http://www.microsoft.com/msdownload/vbscript/scripting.asp .");

#uncomment to search for ActivePython 
#$installer->SetRegistrySearch('PYTHON','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\2.0\InstallPath','');
#$installer->AddLaunchCondition(Condition => 'PYTHON <> "Absent"', Description => 'ActivePython not found.');


#CUSTOM ACTIONS:
#msidbCustomActionTypeAsync =0x40 (64)
#msidbCustomActionTypeContinue=0x80 (128)

# setup visual studio
#$installer->RunLocalFile('DEVENV','/setup');


#Install the various Python com servers
#Action type: 230 = 37 + 64 + 128
#my $AcType = 229;
#my $ScrStart = '(new ActiveXObject("WScript.Shell")).Run("\"" + #Session.TargetPath("ACTIVESTATE_TESTPROD") + "';
#my $ScrEnd1 = '\"",0,false);';
#my $ScrEnd2 = '\" --unregister",0,false);';

#$installer->SetJScript($ScrStart . 'AutoCompleteComServer.py' . $ScrEnd1,1);
#$installer->SetJScript($ScrStart . 'AutoCompleteComServer.py' . $ScrEnd2,0);


#see if we have directories without files:
while( (my $comp_name, my $comp) = (each %{$image->{'ComponentList'}}) ){
    if ($#{$comp->{files}}== -1 && $comp->{props}->{'Directory_'} eq $comp_name){
        $installer->AddCreateFolder(Directory_ => $comp_name, Component_ => $comp->{props}->{'Component'});
    }
}

