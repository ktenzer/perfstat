use strict;
require "FileData.pl";
use Cwd;
use File::Basename;
use File::Copy;
use IO::File;
use File::Find;
use MSI;
use MSI::Vars qw/@SYSTEM_FOLDERS/;

my $image_dir;
my $body_section = "";
my $exe_servers_section = "";
my $self_reg_section = "";
my $shared_files_section = "";
my $self_reg_exts = 'dll|exe|ocx';

###########################################################################
#  usage: GenerateScript($company_name,$product_dir,$product_name,$product_version,$product_version_name,$msi_db)
##########################################################################
sub GenerateScript {
    my $company_name = shift;
    my $product_dir = shift;
    my $product_name = shift;
    my $product_version = shift;
    my $product_version_name = shift;
    my $msi_db = shift;

    my ($wizard_dir,$top_dir,$out_file,$primary_folder,$image_dir) =
    initVar($company_name,$product_dir,$product_name,$product_version,$product_version_name);

    my $fh = IO::File->new();
    $fh->open("> $out_file") or die "$out_file : $!" ;
    my $date = scalar localtime;

    my $preamble_section =<<"HERE";
###############################################################################
#
# ActiveState $product_name product installation script.
#
# Created on $date by $ENV{USERNAME}.
#
#		    ************ WARNING ************
#
#   This script was originally generated by $0.
#   If an attempt is made to regenerate this script any changes made to the
#   original script will be lost.
#
#		    ************ WARNING ************
#
###############################################################################

use warnings;
use strict;
use MSI::Installer;
use MSI::Dialog;
use MSI::Image;
use Win32::Cabinet;
use IO::File;

use constant COMPANY_NAME	=> '$company_name';
use constant PRODUCT_NAME	=> '$product_name';
use constant PRODUCT_VERSION	=> '$product_version';
use constant PRODUCT_BETA_VERSION	=> '$product_version_name';
use constant MSI_DB             =>'$msi_db';
use constant PRODUCT_LANG	=> '1033';
use constant INSTALL_IMAGE	=> '$image_dir';
use constant CODEPAGE		=> 1033;
use constant KEYWORDS		=> 'Installer';
use constant DESCRIPTION	=> '$product_name files';
use constant PLATFORM		=> 'Intel;1033';
use constant PRIMARY_FOLDER	=> '$primary_folder';

use constant WIZARD_DIR	        => '$wizard_dir';
use constant INFO_ICON	        => '$wizard_dir/res/info.ico';
use constant UP_ICON	        => '$wizard_dir/res/Up.ico';
use constant NEW_ICON	        => '$wizard_dir/res/New.ico';
use constant EXCLAMATION_ICON	=> '$wizard_dir/res/exclamic.ico';
use constant CUSTOMSETUP_ICON	=> '$wizard_dir/res/custicon.ico';
use constant REPAIR_ICON	    => '$wizard_dir/res/repairic.ico';
use constant REMOVE_ICON	    => '$wizard_dir/res/removico.ico';
use constant COMPLETESETUP_ICON	=> '$wizard_dir/res/completi.ico';

# Keith Commented out
#use constant BANNER_BITMAP      => '$wizard_dir/res/Banner.bmp';
#use constant DIALOG_BITMAP      => '$wizard_dir/res/Dialog.bmp';
use constant LICENSE_AGREEMENT	=> '$wizard_dir/res/license.rtf';

HERE

    $body_section .=<<'HERE';
my $installer = MSI::Installer->new(WIZARD_DIR . '/Schema.msi', WIZARD_DIR . "/OUTPUT/" . MSI_DB);


$installer->{DEBUG} = 0;
$installer->SetGUIDFile(WIZARD_DIR . '/OUTPUT/GUIDS.txt');
$installer->UseDialogSet();
$installer->SetSummaryInformation(
    Codepage    => CODEPAGE,
    ProductName => PRODUCT_NAME . " v " . PRODUCT_VERSION,
    CompanyName => COMPANY_NAME,
    Keywords    => KEYWORDS,
    Description => DESCRIPTION,
    Platform    => PLATFORM
    );

my $image = MSI::Image->new();
$image->CreateImage(INSTALL_IMAGE);

# You may customize the calls to $installer->CreateFeature() and
# $installer->SetComponentFeature() to arrange components in the appropriate features.
# Usage: CreateFeature(FeatureName,FeatureParent,Directory,Title,Description,isExpanded)

$installer->CreateFeature('TOP_FEATURE',"", PRIMARY_FOLDER, PRODUCT_NAME, DESCRIPTION,1);

$image->SetComponentFeature(PRIMARY_FOLDER, 'TOP_FEATURE', 1, 1);

$installer->AddCabinet($image, 5, PRODUCT_NAME . '.cab');
$installer->AddImage($image);

$installer->AddProperty(Property => 'Manufacturer', Value => COMPANY_NAME);
$installer->AddProperty(Property => 'ProductName', Value => COMPANY_NAME . " " . PRODUCT_NAME . " " . PRODUCT_BETA_VERSION);
$installer->AddProperty(Property => 'ProductCode', Value => $installer->GetGUID(PRODUCT_NAME));
$installer->AddProperty(Property => 'ProductVersion', Value => PRODUCT_VERSION);
$installer->AddProperty(Property => 'ProductLanguage', Value => PRODUCT_LANG);
$installer->AddProperty(Property => 'ProductID', Value => 'none');
$installer->AddProperty(Property => 'Description', Value => DESCRIPTION);
$installer->AddProperty(Property => 'PRIMARYFOLDER', Value => 'TARGETDIR');

$installer->AddIconFile('InfoIcon', INFO_ICON);
$installer->AddIconFile('UpIcon', UP_ICON);
$installer->AddIconFile('NewIcon', NEW_ICON);
$installer->AddIconFile('ExclamationIcon', EXCLAMATION_ICON);
$installer->AddIconFile('CustomSetupIcon', CUSTOMSETUP_ICON);
$installer->AddIconFile('RepairIcon', REPAIR_ICON);
$installer->AddIconFile('RemoveIcon', REMOVE_ICON);
$installer->AddIconFile('CompleteSetupIcon', COMPLETESETUP_ICON);

# Keith Comented Out
#$installer->AddBannerBitmap(BANNER_BITMAP);
#$installer->AddDialogBitmap(DIALOG_BITMAP);
$installer->AddLicenseText(LICENSE_AGREEMENT);


#INSTALLATION SETTINGS
$installer->SetPerMachineInstallationType();
$installer->SetEnvironmentPath(PRIMARY_FOLDER);
$installer->SetRebootForWin9x();
$installer->SetTargetRoot('ProgramFilesFolder');

#set release notes
$installer->SetReadmeFile('PERFSTAT/doc/readme.html',WIZARD_DIR);

#$installer->SetShortcut('ProgramMenuFolder/ActiveProduct/User Guide',
#                        'ActiveProduct/doc/manual.html');
          
######################################################################################
#Aditional dialog with checkboxes
my $propCount = 1;
my $ContrCount = 1;
#################################
$installer->AddProperty(Property => 'CheckedCondition' . $propCount, Value => 1);
$installer->AddProperty(Property => 'DisableCondition' . $propCount, Value => 1);
$propCount++;
#$installer->AddProperty(Property => 'CheckedCondition' . $propCount, Value => 1);
$installer->AddProperty(Property => 'DisableCondition' . $propCount, Value => 1);
$propCount++;

# Keith Comented Out
#$installer->CreateOptionsDialog('Test Dialog','Testing CreateOptionsDialog function',
#                                "Text Text Text \nText Text Text Text \nText Text Text Text Text Text Text Text",  
#                           [                                                   
#                               {                                               
#                                   Property => 'test_prop_' . $ContrCount,                   
#                                   Caption => "test_prop_$ContrCount capt.",                       
#                                   CheckedCondition => 'CheckedCondition' . $ContrCount,      
#                                   DisableCondition => 'DisableCondition' . $ContrCount++,        
#                               },                                              
#                               {                                               
#                                   Property => 'test_prop_' . $ContrCount,                   
#                                   Caption => "test_prop_$ContrCount capt.",                       
#                                   CheckedCondition => 'CheckedCondition' . $ContrCount,      
#                                   DisableCondition => 'DisableCondition' . $ContrCount++,        
#                               },                                              
#                           ]                                                   
#                       );                                                      
###############################################################################################

#APP SEARCH:

#uncomment to search for MS Visual Studio 7.0 in the registry
#$installer->SetRegistrySearch('DEVENV','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\7.0\Setup\VS','EnvironmentPath');
#$installer->AddLaunchCondition(Condition => 'DEVENV <> "Absent"', Description => 'MS Visual Studio 7.0 not found.');

#search for WScript.Shell
$installer->SetRegistrySearch('WSCRIPT.SHELL','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Classes\WScript.Shell\CLSID','');
$installer->AddLaunchCondition(Condition => 'WSCRIPT.SHELL <> "Absent"', Description => "The installer has detected that Windows Scripting Host is not installed.\nThis installer requires Windows Scripting Host to continue. You can download\nWindows Scripting Host  from http://www.microsoft.com/msdownload/vbscript/scripting.asp .");

#uncomment to search for ActivePython 
#$installer->SetRegistrySearch('PYTHON','Absent','HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\2.0\InstallPath','');
#$installer->AddLaunchCondition(Condition => 'PYTHON <> "Absent"', Description => 'ActivePython not found.');


#CUSTOM ACTIONS:
#msidbCustomActionTypeAsync =0x40 (64)
#msidbCustomActionTypeContinue=0x80 (128)

# setup visual studio
#$installer->RunLocalFile('DEVENV','/setup');

HERE
    # Find selfregistering executable, *.exe servers and shared files
#    File::Find::find(\&process_file_name, $product_dir);
#    if(length($self_reg_section)>0){
#        $body_section .="#SELFREGISRATION:\n";
#        $body_section .= $self_reg_section . "\n";
#    }

#    if(length($exe_servers_section)>0){
#        $body_section .="#EXE SERVERS REGISRATION (uncomment needed):\n";
#        $body_section .= $exe_servers_section . "\n";
#    }

#    if(length($shared_files_section)>0){
#        $body_section .="#SHARED FILES (uncomment needed):\n";
#        $body_section .= $shared_files_section . "\n";
#    }


    $body_section .=<<'HERE';

#Install the various Python com servers
#Action type: 230 = 37 + 64 + 128
#my $AcType = 229;
#my $ScrStart = '(new ActiveXObject("WScript.Shell")).Run("\"" + #Session.TargetPath("ACTIVESTATE_TESTPROD") + "';
#my $ScrEnd1 = '\"",0,false);';
#my $ScrEnd2 = '\" --unregister",0,false);';

#$installer->SetJScript($ScrStart . 'AutoCompleteComServer.py' . $ScrEnd1,1);
#$installer->SetJScript($ScrStart . 'AutoCompleteComServer.py' . $ScrEnd2,0);


#see if we have directories without files:
while( (my $comp_name, my $comp) = (each %{$image->{'ComponentList'}}) ){
    if ($#{$comp->{files}}== -1 && $comp->{props}->{'Directory_'} eq $comp_name){
        $installer->AddCreateFolder(Directory_ => $comp_name, Component_ => $comp->{props}->{'Component'});
    }
}

HERE

    print $fh $preamble_section, "\n";
    print $fh $body_section;
    close($fh);

}


#############################################################################################
sub process_file_name {
    my $file_name = $_;
    (my $path_name = $File::Find::name) =~ s/\//\\/g;
    $path_name =~ s/\Q$image_dir\E[\\\/]?//i;

    #self registred files
    if($file_name =~ /\.($self_reg_exts)$/i){
        my $exists = MSI::_DllExportsFunction($file_name, 'DllRegisterServer');
        $self_reg_section .= "\$installer->SetSelfRegFile('$path_name', 0);\n" if $exists;
    }

    #shared files
    if($file_name =~ /\.(dll|exe|osx|tlb)$/i){
        $shared_files_section .= "#\$installer->SetSharedFile('$path_name');\n";
    }

    #exe servers registration
    if($file_name =~ /\.exe$/i){
        $exe_servers_section .= "#\$installer->SetSelfRegFile('$path_name');\n";
    }
}

###################################################################################################
sub initVar {
    my $company_name = shift;
    my $product_dir = shift;
    my $product_name = shift;
    my $product_version = shift;
    my $product_version_name = shift;


    my $wizard_dir = $0;
    if($wizard_dir =~ /(.*)[\\\/].*/){
        $wizard_dir = $1;
    }else{
        $wizard_dir = cwd();
    }
    $wizard_dir =~ s#\\#/#g;
    my $top_dir = $product_dir;
    $top_dir =~ /(.*)[\\\/](.*)/;
    $image_dir = $1;
    my $out_file = $wizard_dir . '\\OUTPUT\\' . $2 . '.pl';
    $out_file =~ s/ /_/g;


    $product_dir =~ /(.*)[\\\/](.*)/;
    my $primary_folder = $2;
    $product_dir = $1;
    $product_version =~ /(.*\..*\.).*(\..*)/;
    $product_version_name = $1 . $product_version_name;

    return ($wizard_dir,$top_dir,$out_file,$primary_folder,$product_dir);
}

###################################################################################################

__DATA__

=head1 NAME

_msiwiz.pl

=head1 DESCRIPTION

This script will generate a template script which in turn will generate an MSI
installation database. The resulting script can then be customized mainly using
the interfaces defined by MSI::Installer and also by the interfaces defined by
the other MSI::* modules. This script can be run in batch mode or
interactively. In batch, configuration options are specified on the command
line while interactive mode will prompt the user for each configuration option.
By default the resulting script is written to STDOUT. If the `-o' option is
specified the resulting script will be written to the file specified by that
option.

=head1 SEE ALSO

L<MSI::Installer>, L<MSI::Image>, L<MSI::DB>, L<Win32::Cabinet>, L<perl>

=head1 COPYRIGHT

Copyright (c) 2001 ActiveState Corp. All rights reserved.

=cut

__END__
