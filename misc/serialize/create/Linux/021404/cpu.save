#!/usr/bin/perl

require "/perfstat/build/serialize/create/ServiceConfig.pl";

#add create new service
$service = Service->new(	RRA => "RRA:AVERAGE:0.5:1:1728 RRA:AVERAGE:0.5:6:1296 RRA:AVERAGE:0.5:24:996 RRA:AVERAGE:0.5:144:730",	
							rrdStep => "300",
							serviceName => "cpu",
						);

#add metric 0
$obj = Metric->new(	rrdIndex => 0,
					metricName => "usrPct",
					friendlyName => "User % Utilization",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 75,
					critThreshold => 90,
					thresholdUnit => "Percent",
					);
$service->addMetric($obj);

#add metric 1
$obj = Metric->new(	rrdIndex => 1,
					metricName => "sysPct",
					friendlyName => "System % Utilization",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 75,
					critThreshold => 90,
					thresholdUnit => "Percent",
					);
$service->addMetric($obj);

#add metric 2
$obj = Metric->new(	rrdIndex => 2,
					metricName => "idlPct",
					friendlyName => "Idle % Utilization",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 75,
					critThreshold => 90,
					thresholdUnit => "Percent",
					);
$service->addMetric($obj);

#add metric 3
$obj = Metric->new(	rrdIndex => 3,
					metricName => "load1",
					friendlyName => "Load Average (1 Minute)",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 3,
					critThreshold => 5,
					thresholdUnit => "Number",
					);
$service->addMetric($obj);

#add metric 4
$obj = Metric->new(	rrdIndex => 4,
					metricName => "load5",
					friendlyName => "Load Average (5 Minute)",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 3,
					critThreshold => 5,
					thresholdUnit => "Number",
					);
$service->addMetric($obj);

#add metric 5
$obj = Metric->new(	rrdIndex => 5,
					metricName => "load15",
					friendlyName => "Load Average (15 Minute)",
					status => "nostatus",
					rrdDST => GAUGE,
					rrdHeartbeat => 600,
					rrdMin => 0,
					rrdMax => U,
					hasEvents => 1,
					warnThreshold => 3,
					critThreshold => 5,
					thresholdUnit => "Number",
					);
$service->addMetric($obj);

#add graph 0
$obj = Graph->new(	name => "load",
					title   	=> "Load Average",
					comment		=> "",
					imageFormat	=> "png",
					width		=> "500",
					height		=> "120",
					verticalLabel	=> "integer",
					upperLimit	=> "",
					lowerLimit	=> "",
					rigid		=> "",
					base		=> "1000",
					unitsExponent	=> "",
					noMinorGrids	=> "",
					stepValue	=> "",
					gprintFormat	=> "%8.2lf",
					metricIndexHash	=> {},
					metricArray	=> [],
					);

$obj2 = GraphMetric->new(	name => "load1",
						color		=> "#FFFF00",
						lineType	=> "LINE2",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$obj2 = GraphMetric->new(	name => "load5",
						color		=> "#FF0000",
						lineType	=> "LINE2",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$obj2 = GraphMetric->new(	name => "load15",
						color		=> "#32CD32",
						lineType	=> "LINE2",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$service->addGraph("load", $obj);

#add graph 1
$obj = Graph->new(	name => "usage",
					title   	=> "CPU Utilization",
					comment		=> "",
					imageFormat	=> "png",
					width		=> "500",
					height		=> "120",
					verticalLabel	=> "percent",
					upperLimit	=> "100",
					lowerLimit	=> "",
					rigid		=> "Y",
					base		=> "1000",
					unitsExponent	=> "",
					noMinorGrids	=> "",
					stepValue	=> "",
					gprintFormat	=> "%8.2lf",
					metricIndexHash	=> {},
					metricArray	=> [],
					);

$obj2 = GraphMetric->new(	name => "usrPct",
						color		=> "#FFFF00",
						lineType	=> "AREA",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$obj2 = GraphMetric->new(	name => "sysPct",
						color		=> "#FF0000",
						lineType	=> "STACK",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$obj2 = GraphMetric->new(	name => "idlPct",
						color		=> "#32CD32",
						lineType	=> "STACK",
						gprintArray	=> [qw{AVERAGE LAST}],
						cDefinition	=> "",
						);
$obj->addGraphMetric("usrPct", $obj2);

$service->addGraph("usage", $obj);

#print out this service
print ("Ref: ref($service)\n");

$serviceName = $service->getServiceName();
$RRA = $service->getRRA();
$rrdStep = $service->getRRDStep();
$lastUpdate = $service->getLastUpdate();
print ("serviceName: $serviceName\n");
print ("RRA: $RRA\n");
print ("rrdStep: $rrdStep\n");
print ("Last Update: $lastUpdate\n");

#print out this services metrics
$arrayLength = $service->getMetricArrayLength();
print ("metric Array Length = $arrayLength\n\n");

for ($counter=0; $counter < $arrayLength; $counter++)
{
	$metricObject = $service->{metricArray}->[$counter];

	$rrdIndex = $metricObject->getRRDIndex();
    $rrdDST = $metricObject->getRRDDST();
    $rrdHeartbeat = $metricObject->getRRDHeartbeat();
    $rrdMin = $metricObject->getRRDMin();
    $rrdMax = $metricObject->getRRDMax();
	$metricName = $metricObject->getMetricName();
	$friendlyName = $metricObject->getFriendlyName();
	$status = $metricObject->getStatus();
	$hasEvents = $metricObject->getHasEvents();
	$warnThreshold = $metricObject->getWarnThreshold();
	$critThreshold = $metricObject->getCritThreshold();
	$thresholdUnit	= $metricObject->getThresholdUnit();

	print ("rrdIndex: $rrdIndex\n");
    print ("rrdDST: $rrdDST\n");
    print ("rrdHeartbeat: $rrdHeartbeat\n");
    print ("rrdMin: $rrdMin\n");
    print ("rrdMax: $rrdMax\n");
	print ("metricName: $metricName\n");
	print ("friendlyName: $friendlyName\n");
    print ("status: $status\n");
	print ("hasEvents: $hasEvents\n");
	print ("warnThreshold: $warnThreshold\n");
	print ("critThreshold: $critThreshold\n");
	print ("threshUnit: $thresholdUnit\n\n");
}

#print out this services graphs
$graph = $service->{graphHash};
foreach my $key (keys %{$graph})
{
	$graphObject = $service->{graphHash}->{$key};

	$graphName = $graphObject->getName();
	$lowerLimit = $graphObject->getLowerLimit();
	print ("Graph Name: $graphName\n");
	print ("Lower Limit: $lowerLimit\n");


	# Via Hash
	#$graphMetric = $graphObject->{metricIndexHash};
	#foreach my $key (sort keys %{$graphMetric})
	#{
	#	my $value = $graphObject->{metricIndexHash}->{$key};
	#	$graphMetricName = $graphObject->{metricArray}->[$value]->getName();
	#	print "Key: $key Value: $graphObject->{metricIndexHash}->{$key}\n";
	#	print ("graphMetricName: $graphMetricName\n");
	#}

	# Via MetricArray option 1
	#my $data_ref=\@{$graphObject->{metricArray}};

	#my $i=();
	#foreach ($i=0; $i <= $#$data_ref; $i++) {
	#	my $value = $graphObject->{metricArray}->[$i]->getName();
	#	print "Key: $i Value: $value\n";
	#}

	# Via MetricArray option 2
	foreach my $key (@{$graphObject->{metricArray}}) {
		my $metricName = $key->getName();
		my $color = $key->{color};
		my $lineType = $key->getLineType();
		my $definition = $key->getDefinition();
		my $line = $key->getLine();
		my $cDefinition = $key->getCdefinition();

		print "Graph Metric Name: $metricName\n";
		print "DEF: $definition\n";
		print "LINE: $line\n";
		print "GPRINT : @{$key->{gprintArray}}\n";
		print "CDEF: $cDefinition\n";
		print "Color: $color\n";
		print "Line Type: $lineType\n";
		print "\n";
	}
}


#Store the service
#$service->store("$perfhome/etc/configs/Linux/$service->{serviceName}.ser") or die("can't store $service->{serviceName}.ser?\n");
$service->store("/tmp/$service->{serviceName}.ser") or die("can't store $service->{serviceName}.ser?\n");
